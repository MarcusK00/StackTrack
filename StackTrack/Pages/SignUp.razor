@page "/signup"
@namespace StackTrack.Models
@inject NavigationManager Navigation
@inject Supabase.Client SupabaseClient

<PageTitle>Sign Up</PageTitle>

<div class="login-wrapper">
    <MudImage Class="logo-image" ObjectFit="ObjectFit.Contain" Width="250" Height="250" Src="images/logo2.png" Alt="logo" Elevation="0" />
    <div class="login-container">


        <EditForm Model="@UserSignUp">
            <DataAnnotationsValidator />
            <ValidationSummary />



                <MudTextField Class="d-flex py-2" @bind-Value="UserSignUp.Email" Variant="Variant.Filled" Label="Email" />
                <ValidationMessage For="@(() => UserSignUp.Email)" />

                <MudTextField Class="d-flex py-2" @bind-Value="UserSignUp.Password" Label="Password" Variant="Variant.Filled" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
                <ValidationMessage For="@(() => UserSignUp.Password)" />

                <MudTextField Class="d-flex py-2" @bind-Value="passwordCheck" Label="Repeat Password" Variant="Variant.Filled" InputType="@PasswordInput"  OnAdornmentClick="ButtonTestclick"  />
                <ValidationMessage For="@(() => passwordCheck)" />

            <MudPaper Class="d-flex flex-grow-1 gap-1 mt-1" Elevation="0">
                    <MudButton Class="py-3 d-inline-flex flex-1" Disabled="@_processing" OnClick="HandleSignUp" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing</MudText>
                        }
                        else
                        {
                            <MudText>Sign Up</MudText>
                        }

                    </MudButton>
                  
            </MudPaper>
            <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="2">
                <MudText Class="py-3 d-inline-flex mud-transparent ">Already have an account?</MudText>
                <MudButton Class="d-inline-flex " Variant="Variant.Text" OnClick="RedirectToLogin" Color="Color.Primary">Sign In</MudButton>
            </MudStack>
        </EditForm>
    </div>
</div>

@code
{
    [Inject] private IDialogService? DialogService { get; set; }
    private string? passwordCheck;
    private User UserSignUp = new User();
    private bool _processing = false;
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task HandleSignUp()
    {
        if (IfPasswordMatch())
        {
            await ProcessSomething();
            try
            {
                var session = await SupabaseClient.Auth.SignUp(UserSignUp.Email, UserSignUp.Password);
                if (session.User != null)
                {
                    ClearTextFields();
                    await Task.Delay(3000);
                    Navigation.NavigateTo("/login");
                }

            }
            catch (Exception ex)
            {

                Console.Error.WriteLine($"Error: {ex}");
            }
        }
        else
        {
            MessageBox();
        }
    }



    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task ProcessSomething()
    {
        _processing = true;
        await Task.Delay(2000);
        _processing = false;
    }

    private bool IfPasswordMatch()
    {
        if (passwordCheck == UserSignUp.Password)
            return true;
        else return false;
    }

    private async void MessageBox()
    {
        ClearTextFields();

        bool? result = await DialogService.ShowMessageBox(
            "Error",
            "Passwords doesn't match");

    }

    private void ClearTextFields()
    {
        UserSignUp.Email = string.Empty;
        passwordCheck = string.Empty;
        UserSignUp.Password = string.Empty;
    }


}






