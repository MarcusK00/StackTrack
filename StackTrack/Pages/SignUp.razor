@page "/signup"
@namespace StackTrack.Models
@inject NavigationManager Navigation
@inject Supabase.Client SupabaseClient

<PageTitle>Sign Up</PageTitle>

<div class="login-container">
    <h3>Sign Up to StackTrack</h3>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
    else if(!string.IsNullOrEmpty(sentEmail))
    {
    <div class="email-confirmation">
        @sentEmail
    </div>
    }

    <EditForm Model="@UserSignUp" OnValidSubmit="HandleSignUp">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="UserSignUp.Email" />
            <ValidationMessage For="@(() => UserSignUp.Email)" />
        </div>

        <div class="form-group">
            <label>Password</label>
            <InputText class="form-control" @bind-Value="UserSignUp.Password" type="password" />
            <ValidationMessage For="@(() => UserSignUp.Password)" />
        </div>
        <div>
            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>Creating User...</span>
                }
                else
                {
                    <span>Sign Up</span>
                }
            </button>
            <button type="button" class="btn btn-secondary" onclick="@RedirectToLogin">Back</button>
        </div>
    </EditForm>
</div>

@code
{
    private User UserSignUp = new User();
    private string errorMessage = string.Empty;
    private string sentEmail = string.Empty;
    private bool isLoading = false;

    private void RedirectToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    private async Task HandleSignUp()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var session = await SupabaseClient.Auth.SignUp(UserSignUp.Email, UserSignUp.Password);
            if (session.User != null)
            {
                sentEmail = $"Email confirmation link has been sent to {session.User.Email}";
                Console.WriteLine($"User created successfully {session.User.Email}");
                UserSignUp.Email = string.Empty;
                UserSignUp.Password = string.Empty;
                return;
            }
            else
            {
                errorMessage = "Error, try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Creation failed: {ex.Message}";
            Console.Error.WriteLine($"Create error: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }
}